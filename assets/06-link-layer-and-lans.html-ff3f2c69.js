import{_ as n,r as i,o as e,c as r,a as s,b as l,d as m,e as a}from"./app-ebeb099c.js";const p="/assets/image-20230518180024184-ab2bd2d3.png",c="/assets/image-20230518180512130-c0869f7d.png",o="/assets/image-20230518181444747-68ff636f.png",h="/assets/image-20230518181939406-2784d3cd.png",d="/assets/image-20230518183408852-8564bf75.png",u="/assets/image-20230518192928492-fc1e5cfb.png",g="/assets/image-20230525171556533-ea5591a6.png",y="/assets/image-20230222000508480-e7aba148.png",b={},f=a('<p>即链路层和局域网</p><h2 id="outline" tabindex="-1"><a class="header-anchor" href="#outline" aria-hidden="true">#</a> Outline</h2><ol><li>introduction, services</li><li>error detection, correction</li><li>multiple access protocols *</li><li>LANs * <ul><li>addressing, ARP</li><li>Ethernet</li><li>switches</li><li>VLANS</li></ul></li><li>link virtualization: MPLS（少考）</li><li>data center networking（少考）</li><li>a day in the life of a web request</li></ol><h2 id="link-layer-introduction" tabindex="-1"><a class="header-anchor" href="#link-layer-introduction" aria-hidden="true">#</a> Link layer: introduction</h2>',4),x={href:"https://toby-fish.github.io/2021/11/22/%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"为了透彻理解链路层以及它是如何与网络层关联的，我们考虑一个交通运输的类比例子。",-1),k=s("p",null,"假设一个旅行计划为游客开辟从美国新泽西州的普林斯顿到瑞士洛桑的旅游路线。假定该旅行社认为对于游客而言最为便利的方案是：从普林斯顿乘豪华大轿车到 JFK 机场，然后乘飞机从 JFK 机场去日内瓦机场，最后乘火车从日内瓦机场到洛桑火车站。一旦该旅行社作了这 3 项预定，普林斯顿豪华大轿车公司将负责将游客从普林斯顿带到 JFK，航空公司将负责将游客从 JFK 带到日内瓦，瑞士火车服务将负责将游客从日内瓦带到洛桑。该旅途中 3 段中的每一段都在两个“相邻”地点之间是“直达的”。注意到这 3 段运输是由不同的公司管理，使用了完全不同的运输方式（豪华大轿车、飞机和火车）。尽管运输方式不同，但它们都提供了将旅客从一个地点运输到相邻地点的基本服务。",-1),_=s("p",null,"在这个运输类比中，一个游客好比一个数据报，每个运输区段好比一条链路，每种运输方式好比一种链路层协议，而该旅行社好比一个路由选择协议。",-1),w=a('<p>一些概念：</p><ul><li>节点（node）：运行链路层协议的任何人设备，如：主机、路由器、网桥、交换机等；</li><li>链路（link）：沿着通信路径连接相邻节点的通信信道，包括： <ul><li>有线链路</li><li>无线链路</li><li>局域网，共享性链路</li></ul></li><li>数据单元帧（frame）：封装数据报，位于第二层协议</li></ul><h3 id="链路层提供的服务" tabindex="-1"><a class="header-anchor" href="#链路层提供的服务" aria-hidden="true">#</a> 链路层提供的服务</h3><p>数据链路层负责从一个节点通过链路将（帧中的）数据报发送到相邻的物理节点（一个子网内部的 2 节点）。</p><ul><li>成帧（Framing）、链路接入（Link access）： <ul><li>将数据报封装在帧中，加上帧头、帧尾部</li><li>如果采用的是共享性介质，信道接入获得信道访问权；</li><li>**媒体访问控制（Medium Access Control，MAC）**协议规定了帧在链路上传输规则；</li></ul></li><li>可靠交付（Reliable deliver）、差错检测和纠正（Error detection and correction）： <ul><li>第三章传输层的可靠数据传输</li><li>在低出错率的链路上（光纤和双绞线电缆）很少使用</li><li>在无线链路经常使用：出错率高</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">为什么在链路层和传输层都实现了可靠性？</p><p>一般化的链路层服务，不是所有的链路层都提供这些服务。一个特定的链路层只是提供其中一部分的服务。</p></div><h3 id="链路在何处实现" tabindex="-1"><a class="header-anchor" href="#链路在何处实现" aria-hidden="true">#</a> 链路在何处实现</h3><p>链路层的主体部分在<strong>网络适配器（network adapter）中实现，网络适配器有时也称为网络接口卡（Network Interface Card，NIC）</strong>。位于网络适配器核心的是链路层控制器，该控制器通常是一个实现了许多链路层服务（成帧、链路接入、差错检测等）的专用芯片。</p><p>一个典型的主机体系结构如下图所示：</p><p><img src="'+p+'" alt="image-20230518180024184" loading="lazy"></p><h2 id="error-detection-correction" tabindex="-1"><a class="header-anchor" href="#error-detection-correction" aria-hidden="true">#</a> Error detection, correction</h2><p>差错检测与纠正的场景如下图所示：</p><p><img src="'+c+'" alt="image-20230518180512130" loading="lazy"></p><p>差错检测和纠正技术有：</p><ol><li>奇偶校验，包括使用单个<strong>奇偶检验位</strong>（parity bit）和<strong>二维奇偶校验</strong>（two-dimensional parity）；</li><li>检验和方法；</li><li>循环冗余检测（Cyclic Redundancy Check, CRC）编码</li></ol><h3 id="edc" tabindex="-1"><a class="header-anchor" href="#edc" aria-hidden="true">#</a> EDC</h3><ul><li>EDC=差错检测和纠正位（冗余位）</li><li>D=数据由差错检测保护，可以包含头部字段错误检测。</li></ul><p>错误检测不是 100%可靠的！</p><ul><li>协议会漏检一些错误，但是很少</li><li>更长的 EDC 字段可以得到更好的检测和纠正效果</li></ul><h3 id="parity-checks" tabindex="-1"><a class="header-anchor" href="#parity-checks" aria-hidden="true">#</a> Parity Checks</h3><p><strong>单个奇偶校验位（single bit parity）</strong>：detect single bit errors</p><p>发送 d 比特信息附加一个比特使 d+1 比特中 1 的总数是偶数（偶校验）或奇数（奇校验），偶校验如下图所示：</p><p><img src="'+o+'" alt="image-20230518181444747" loading="lazy"></p><p>但注意此种方法只能检测不能纠错，并且也不能检测超过 1 比特位的错误。</p><p><strong>二维奇偶校验（two-dimension parity）</strong>：detect and correct single bit errors</p><p><img src="'+h+'" alt="image-20230518181939406" loading="lazy"></p><h3 id="cyclic-redundancy-check-crc" tabindex="-1"><a class="header-anchor" href="#cyclic-redundancy-check-crc" aria-hidden="true">#</a> Cyclic Redundancy Check(CRC)</h3><p>计算机网络中广泛应用的差错检测技术基于<strong>循环冗余检测（Cyclic Redundancy Check，CRC）编码，也称为多项式编码（polynomial code）</strong>，CRC 如下图所示：</p><p><img src="'+d+'" alt="image-20230518183408852" loading="lazy"></p><p><img src="'+u+'" alt="image-20230518192928492" loading="lazy"></p><p>其中 <code>R</code> 计算：</p>',31),A=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mo",null,"="),s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"d"),s("mi",null,"e"),s("mi",null,"r"),s("mfrac",null,[s("mrow",null,[s("mi",null,"D"),s("mo",null,"⋅"),s("msup",null,[s("mn",null,"2"),s("mi",null,"r")])]),s("mi",null,"G")])]),s("annotation",{encoding:"application/x-tex"}," R=remainder\\frac{D\\cdot2^r}{G} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0463em","vertical-align":"-0.686em"}}),s("span",{class:"mord mathnormal"},"re"),s("span",{class:"mord mathnormal"},"main"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"G")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r")])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1),z=a('<h2 id="multiple-access-protocols" tabindex="-1"><a class="header-anchor" href="#multiple-access-protocols" aria-hidden="true">#</a> Multiple access protocols</h2><p>多路访问链路和协议，或者说全称 Multiple Acess Links and Protocol。</p><p>两种类型的网络链路：</p><ul><li><strong>点对点链路（point-to-point link）</strong><ul><li>拨号访问的 PPP</li><li>以太网交换机和主机之间的点对点链路</li></ul></li><li><strong>广播链路（broadcast link）</strong>：共享线路或媒体 <ul><li>传统以太网</li><li>HFC 上行链路</li><li>802.11 无线局域网</li></ul></li></ul><p><img src="'+g+'" alt="image-20230525171556533" loading="lazy"></p><div class="custom-container tip"><p class="custom-container-title">多路访问协议</p><ul><li>单个共享的广播型链路</li><li>传输的帧在接收方可能在接收方处碰撞/冲突（collide）。</li><li>分布式算法-决定节点如何使用共享信道，即：决定节点什么时候可以发送？</li></ul></div><p>在理想情况下，对于速率为 R bps 的广播信道，多路访问协议应该具有以下所希望的特性：</p><ol><li><p>当且仅当一个节点发送数据时，该节点具有 R bps 的吞吐量；</p></li><li><p>当有 M 个节点发送数据时，每个节点吞吐量为 R/M bps。这不必要求 M 个节点中的每一个节点总是有 R/M 的瞬时速率，而是每个节点在一些适当定义的时间间隔内应该有 R/M 的平均传输速率；</p></li><li><p>协议是分散的，这就是说不会因为某主节点故障而使整个系统崩溃</p><p>（高级的说法：没有特殊节点协调发送、没有时钟和时隙的同步）</p></li><li><p>协议是简单的，使实现不昂贵</p></li></ol><p>现在主流的 3 种类型多路访问协议（介质访问控制协议，MAC）：</p><ul><li><strong>信道划分协议（channel partitioning protocol）</strong><ul><li>把信道划分成小片（时间、频率、编码）</li><li>分配片给每个节点专用</li></ul></li><li><strong>随机接入协议（random access protocol）</strong><ul><li>信道不划分，允许冲突</li><li>冲突后恢复</li></ul></li><li><strong>轮流协议（taking-turns protocol）</strong><ul><li>节点依次轮流</li><li>但是有很多数据传输的节点可以获得较长的信道使用权</li></ul></li></ul><h3 id="信道划分协议" tabindex="-1"><a class="header-anchor" href="#信道划分协议" aria-hidden="true">#</a> 信道划分协议</h3><p>Channel Partitioning Protocols</p><p><strong>时分多路复用</strong>（time division multiple access，简称 TDMA）：</p><ul><li>轮流（“rounds”）使用信道（channel），信道的时间分为周期</li><li>每个站点使用每周期中固定的时隙（长度=帧传输时间）传输帧</li><li>时隙空闲（浪费）主要出现在站点无帧传输</li></ul><p><strong>频分多路复用</strong>（frequency division multiple access，简称 FDMA）：</p><ul><li>信道的有效频率范围被分成一个个小的频段</li><li>每个站点被分配一个固定的频段</li><li>浪费主要出现在分配给站点的频段没有被使用</li></ul><p><strong>码分多址</strong>（Code Division Multiple Access，简称 CDMA）</p><ul><li>所有站点在整个频段上同时进行传输，采用编码原理加以区分</li><li>完全没有冲突（假定信号同步很好，线性叠加）</li></ul><h3 id="随机接入协议" tabindex="-1"><a class="header-anchor" href="#随机接入协议" aria-hidden="true">#</a> 随机接入协议</h3><blockquote><p>Random Access Protocols</p></blockquote><h4 id="slotted-aloha" tabindex="-1"><a class="header-anchor" href="#slotted-aloha" aria-hidden="true">#</a> Slotted ALOHA</h4><p>Slotted 时隙，ALOHA 是夏威夷土著语，意为“你好”、“谢谢”。</p><p>假设：</p><ul><li><p>all frames same size</p></li><li><p>time divided into equal size slots(时间划分为大小相等的插槽) (time to transmit 1 frame)</p></li><li><p>nodes start to transmit only slot beginning(插槽开头)</p></li><li><p>nodes are synchronized（同步过）</p></li><li><p>if 2 or more nodes transmit in slot, all nodes detect collision(所有节点都检测到冲突)</p></li></ul><p>在每个节点中，时隙 ALOHA 的操作如下：</p><ul><li>当节点有一个新帧要发送时，它等到下一个间隙开始并在该时隙传输整个帧；</li><li>如果没有碰撞，该节点成功地传输它的帧，从而不需要考虑重传该帧；</li><li>如果有碰撞，该节点在时隙结束之前检测到这次碰撞，该节点以概率 p 在后续的每个时隙中重传它的帧，直到该帧被无碰撞的传输出去；</li></ul><p><img src="'+y+'" alt="image-20230222000508480" loading="lazy"></p><h4 id="slotted-aloha-efficiency" tabindex="-1"><a class="header-anchor" href="#slotted-aloha-efficiency" aria-hidden="true">#</a> Slotted ALOHA: efficiency</h4><p>效率：当有很多节点，每个节点有很多帧要发送时，x%的时隙是成功传输帧的时隙</p>',29),M=s("ul",null,[s("li",null,"假设 N 个节点，每个节点都有很多帧要发送，在每个时隙中的传输概率是 p"),s("li",null,[l("一个节点成功传输概率是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"p"),s("msup",null,[s("mo",{stretchy:"false"},")"),s("mrow",null,[s("mi",null,"N"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"p(1-p)^{N-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0913em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8413em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("li",null,[l("任何一个节点的成功概率是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"p"),s("msup",null,[s("mo",{stretchy:"false"},")"),s("mrow",null,[s("mi",null,"N"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"Np(1-p)^{N-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"Np"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0913em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8413em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("li",null,[l("N 个节点的最大效率：求出使 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"N"),s("mi",null,"p"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"p"),s("msup",null,[s("mo",{stretchy:"false"},")"),s("mrow",null,[s("mi",null,"N"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"Np(1-p)^{N-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"Np"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0913em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"p"),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8413em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])]),l(" 最大的 p*")]),s("li",null,[l("代入 P*得到最大 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"f"),s("mo",{stretchy:"false"},"("),s("msup",null,[s("mi",null,"p"),s("mo",null,"∗")]),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mi",null,"N"),s("msup",null,[s("mi",null,"p"),s("mo",null,"∗")]),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("msup",null,[s("mi",null,"p"),s("mo",null,"∗")]),s("msup",null,[s("mo",{stretchy:"false"},")"),s("mrow",null,[s("mi",null,"N"),s("mo",null,"−"),s("mn",null,"1")])])]),s("annotation",{encoding:"application/x-tex"},"f(p^*)=Np^*(1-p^*)^{N-1}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6887em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mbin mtight"},"∗")])])])])])])]),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6887em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mbin mtight"},"∗")])])])])])])]),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0913em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"p"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6887em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mbin mtight"},"∗")])])])])])])]),s("span",{class:"mclose"},[s("span",{class:"mclose"},")"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8413em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"mbin mtight"},"−"),s("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),s("li",null,[l("N 为无穷大时的极限为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mi",{mathvariant:"normal"},"/"),s("mi",null,"e"),s("mo",null,"="),s("mn",null,"0.37")]),s("annotation",{encoding:"application/x-tex"},"1/e=0.37")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1/"),s("span",{class:"mord mathnormal"},"e"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0.37")])])])])],-1),C=a('<p>即最好情况：信道利用率 37%</p><h4 id="pure-unslotted-aloha" tabindex="-1"><a class="header-anchor" href="#pure-unslotted-aloha" aria-hidden="true">#</a> Pure (unslotted) ALOHA</h4><p>在纯 ALOHA 中，当一帧首次到达，节点立刻将该帧完整地传输进广播信道。</p><p>效率上：比时隙 ALOHA 更差了！</p><h3 id="载波侦听多路访问" tabindex="-1"><a class="header-anchor" href="#载波侦听多路访问" aria-hidden="true">#</a> 载波侦听多路访问</h3><p>CSMA (carrier sense multiple access)</p><p>两个重要的规则：</p><ol><li>说话之前先听。如果其他人正在说话，等到他们说完话为止。在网络领域中，这被称为<strong>载波侦听</strong>（carrier sensing），即一个节点在传输前先听信道。如果来自另一个节点的帧正向信道上发送，节点则等待直到检测到一小段时间没有传输，然后开始传输</li><li>如果与他人同时开始说话，停止说话。在网络领域中，这被称为<strong>碰撞检测</strong>（collision detection），即当一个传输节点在传输时一直在侦听此信道。如果它检测到另一个节点正在传输干扰帧，它就停止传输，在重复“侦听-当空闲时传输”循环之前等待一段随机时间</li></ol>',8);function N(E,L){const t=i("ExternalLinkIcon");return e(),r("div",null,[f,s("blockquote",null,[s("p",null,[s("a",x,[l("笔记-计算机网络-自顶向下 | FEZ 的博客 (toby-fish.github.io)"),m(t)])]),v,k,_]),w,A,z,M,C])}const D=n(b,[["render",N],["__file","06-link-layer-and-lans.html.vue"]]);export{D as default};
