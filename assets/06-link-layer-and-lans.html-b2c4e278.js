import{_ as e,r as i,o as t,c as n,a as s,b as r,d as c,e as a}from"./app-a93440ed.js";const o="/assets/image-20230518180024184-ab2bd2d3.png",p="/assets/image-20230518180512130-c0869f7d.png",m="/assets/image-20230518181444747-68ff636f.png",d="/assets/image-20230518181939406-2784d3cd.png",h="/assets/image-20230518183408852-8564bf75.png",u="/assets/image-20230518192928492-fc1e5cfb.png",g={},y=a('<p>即链路层和局域网</p><h2 id="outline" tabindex="-1"><a class="header-anchor" href="#outline" aria-hidden="true">#</a> Outline</h2><ol><li>introduction, services</li><li>error detection, correction</li><li>multiple access protocols *</li><li>LANs * <ul><li>addressing, ARP</li><li>Ethernet</li><li>switches</li><li>VLANS</li></ul></li><li>link virtualization: MPLS（少考）</li><li>data center networking（少考）</li><li>a day in the life of a web request</li></ol><h2 id="link-layer-introduction" tabindex="-1"><a class="header-anchor" href="#link-layer-introduction" aria-hidden="true">#</a> Link layer: introduction</h2>',4),_={href:"https://toby-fish.github.io/2021/11/22/%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/",target:"_blank",rel:"noopener noreferrer"},f=s("p",null,"为了透彻理解链路层以及它是如何与网络层关联的，我们考虑一个交通运输的类比例子。",-1),b=s("p",null,"假设一个旅行计划为游客开辟从美国新泽西州的普林斯顿到瑞士洛桑的旅游路线。假定该旅行社认为对于游客而言最为便利的方案是：从普林斯顿乘豪华大轿车到 JFK 机场，然后乘飞机从 JFK 机场去日内瓦机场，最后乘火车从日内瓦机场到洛桑火车站。一旦该旅行社作了这 3 项预定，普林斯顿豪华大轿车公司将负责将游客从普林斯顿带到 JFK，航空公司将负责将游客从 JFK 带到日内瓦，瑞士火车服务将负责将游客从日内瓦带到洛桑。该旅途中 3 段中的每一段都在两个“相邻”地点之间是“直达的”。注意到这 3 段运输是由不同的公司管理，使用了完全不同的运输方式（豪华大轿车、飞机和火车）。尽管运输方式不同，但它们都提供了将旅客从一个地点运输到相邻地点的基本服务。",-1),k=s("p",null,"在这个运输类比中，一个游客好比一个数据报，每个运输区段好比一条链路，每种运输方式好比一种链路层协议，而该旅行社好比一个路由选择协议。",-1),C=a('<p>一些概念：</p><ul><li>节点（node）：运行链路层协议的任何人设备，如：主机、路由器、网桥、交换机等；</li><li>链路（link）：沿着通信路径连接相邻节点的通信信道，包括： <ul><li>有线链路</li><li>无线链路</li><li>局域网，共享性链路</li></ul></li><li>数据单元帧（frame）：封装数据报，位于第二层协议</li></ul><h3 id="链路层提供的服务" tabindex="-1"><a class="header-anchor" href="#链路层提供的服务" aria-hidden="true">#</a> 链路层提供的服务</h3><p>数据链路层负责从一个节点通过链路将（帧中的）数据报发送到相邻的物理节点（一个子网内部的 2 节点）。</p><ul><li>成帧（Framing）、链路接入（Link access）： <ul><li>将数据报封装在帧中，加上帧头、帧尾部</li><li>如果采用的是共享性介质，信道接入获得信道访问权；</li><li>**媒体访问控制（Medium Access Control，MAC）**协议规定了帧在链路上传输规则；</li></ul></li><li>可靠交付（Reliable deliver）、差错检测和纠正（Error detection and correction）： <ul><li>第三章传输层的可靠数据传输</li><li>在低出错率的链路上（光纤和双绞线电缆）很少使用</li><li>在无线链路经常使用：出错率高</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">为什么在链路层和传输层都实现了可靠性？</p><p>一般化的链路层服务，不是所有的链路层都提供这些服务。一个特定的链路层只是提供其中一部分的服务。</p></div><h3 id="链路在何处实现" tabindex="-1"><a class="header-anchor" href="#链路在何处实现" aria-hidden="true">#</a> 链路在何处实现</h3><p>链路层的主体部分在<strong>网络适配器（network adapter）中实现，网络适配器有时也称为网络接口卡（Network Interface Card，NIC）</strong>。位于网络适配器核心的是链路层控制器，该控制器通常是一个实现了许多链路层服务（成帧、链路接入、差错检测等）的专用芯片。</p><p>一个典型的主机体系结构如下图所示：</p><p><img src="'+o+'" alt="image-20230518180024184" loading="lazy"></p><h2 id="error-detection-correction" tabindex="-1"><a class="header-anchor" href="#error-detection-correction" aria-hidden="true">#</a> Error detection, correction</h2><p>差错检测与纠正的场景如下图所示：</p><p><img src="'+p+'" alt="image-20230518180512130" loading="lazy"></p><p>差错检测和纠正技术有：</p><ol><li>奇偶校验，包括使用单个<strong>奇偶检验位</strong>（parity bit）和<strong>二维奇偶校验</strong>（two-dimensional parity）；</li><li>检验和方法；</li><li>循环冗余检测（Cyclic Redundancy Check, CRC）编码</li></ol><h3 id="edc" tabindex="-1"><a class="header-anchor" href="#edc" aria-hidden="true">#</a> EDC</h3><ul><li>EDC=差错检测和纠正位（冗余位）</li><li>D=数据由差错检测保护，可以包含头部字段错误检测。</li></ul><p>错误检测不是 100%可靠的！</p><ul><li>协议会漏检一些错误，但是很少</li><li>更长的 EDC 字段可以得到更好的检测和纠正效果</li></ul><h3 id="parity-checks" tabindex="-1"><a class="header-anchor" href="#parity-checks" aria-hidden="true">#</a> Parity Checks</h3><p><strong>单个奇偶校验位（single bit parity）</strong>：detect single bit errors</p><p>发送 d 比特信息附加一个比特使 d+1 比特中 1 的总数是偶数（偶校验）或奇数（奇校验），偶校验如下图所示：</p><p><img src="'+m+'" alt="image-20230518181444747" loading="lazy"></p><p>但注意此种方法只能检测不能纠错，并且也不能检测超过 1 比特位的错误。</p><p><strong>二维奇偶校验（two-dimension parity）</strong>：detect and correct single bit errors</p><p><img src="'+d+'" alt="image-20230518181939406" loading="lazy"></p><h3 id="cyclic-redundancy-check-crc" tabindex="-1"><a class="header-anchor" href="#cyclic-redundancy-check-crc" aria-hidden="true">#</a> Cyclic Redundancy Check(CRC)</h3><p>计算机网络中广泛应用的差错检测技术基于<strong>循环冗余检测（Cyclic Redundancy Check，CRC）编码，也称为多项式编码（polynomial code）</strong>，CRC 如下图所示：</p><p><img src="'+h+'" alt="image-20230518183408852" loading="lazy"></p><p><img src="'+u+'" alt="image-20230518192928492" loading="lazy"></p><p>其中 <code>R</code> 计算：</p>',31),E=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"R"),s("mo",null,"="),s("mi",null,"r"),s("mi",null,"e"),s("mi",null,"m"),s("mi",null,"a"),s("mi",null,"i"),s("mi",null,"n"),s("mi",null,"d"),s("mi",null,"e"),s("mi",null,"r"),s("mfrac",null,[s("mrow",null,[s("mi",null,"D"),s("mo",null,"⋅"),s("msup",null,[s("mn",null,"2"),s("mi",null,"r")])]),s("mi",null,"G")])]),s("annotation",{encoding:"application/x-tex"}," R=remainder\\frac{D\\cdot2^r}{G} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0463em","vertical-align":"-0.686em"}}),s("span",{class:"mord mathnormal"},"re"),s("span",{class:"mord mathnormal"},"main"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"er"),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3603em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"G")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"⋅"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r")])])])])])])])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})])])])])])],-1);function x(v,A){const l=i("ExternalLinkIcon");return t(),n("div",null,[y,s("blockquote",null,[s("p",null,[s("a",_,[r("笔记-计算机网络-自顶向下 | FEZ 的博客 (toby-fish.github.io)"),c(l)])]),f,b,k]),C,E])}const R=e(g,[["render",x],["__file","06-link-layer-and-lans.html.vue"]]);export{R as default};
